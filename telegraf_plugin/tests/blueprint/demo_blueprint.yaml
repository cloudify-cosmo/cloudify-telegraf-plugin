# DSL version, should appear in the main blueprint.yaml
# and may appear in other imports. In such case, the versions must match
tosca_definitions_version: cloudify_dsl_1_2

imports:
    # importing cloudify related types, plugins, workflow, etc...
    # to speed things up, it is possible downloading this file,
    # including it in the blueprint directory and importing it
    # instead.
    - http://www.getcloudify.org/spec/cloudify/3.4m3/types.yaml
    - http://www.getcloudify.org/spec/fabric-plugin/1.4/plugin.yaml
    - http://www.getcloudify.org/spec/openstack-plugin/1.3.1/plugin.yaml
    # relative import of plugin.yaml that resides in the blueprint directory
    - test_plugin.yaml
    - my_types.yaml


inputs:
  keystone_username:
    default: ''
    type: string

  keystone_password:
    default: ''
    type: string

  keystone_tenant_name:
    default: ''
    type: string

  keystone_url:
    default: ''
    type: string

  region:
    default: ''
    type: string

  nova_url:
    default: ''
    type: string

  neutron_url:
    default: ''
    type: string

  external_network_name:
    type: string

  resources_prefix:
    default: ''
    type: string


dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }
    resources_prefix: { get_input: resources_prefix }


node_templates:

  public_ip1:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  public_ip2:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  sg_demo:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: influxdb-security-group
      security_group:
        description: Security group for influxdb component
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 9200
        - remote_ip_prefix: 0.0.0.0/0
          port: 8083
        - remote_ip_prefix: 0.0.0.0/0
          port: 8086
        - remote_ip_prefix: 0.0.0.0/0
          port: 9300
        - remote_ip_prefix: 0.0.0.0/0
          port: 6000
        - remote_ip_prefix: 0.0.0.0/0
          port: 3000
      openstack_config: *openstack_configuration

  VM_es:
    type: cloudify.openstack.nodes.Server
    properties:
      resource_id: monitoring_elasticsearch_server
      cloudify_agent:
        user: ubuntu
      server:
        image: 6c3047c6-17b1-4aaf-a657-9229bb481e50
        flavor: c4b193d2-f331-4250-9b15-bbfde97c462a
        userdata: |
          #!/bin/bash
          echo 127.0.1.1 $(cat /etc/hostname) | sudo tee -a sudo /etc/hosts >/dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolv.conf > /dev/null
          echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolvconf/resolv.conf.d/base > /dev/null
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: public_ip1
      - type: cloudify.openstack.server_connected_to_security_group
        target: sg_demo
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: telegraf.telegraf_plugin.tasks.install
          inputs:
            telegraf_install_path: /opt/telegraf
            download_url:
            telegraf_config_file:
            telegraf_config_inputs:
              outputs:
                influxdb:
                  urls:
                    - http://localhost:8086
                  database: monitoring_telegraf
                  precision: s
                kafka:
                  brokers:
                    - 185.98.148.123:9092
                    - 185.98.149.12:9092
                    - 185.98.148.146:9092
                  topic: es
                  compression_codec: 0
                  required_acks: -1
                  max_retry: 3
                  data_format: influx
              inputs:
                elasticsearch:
                  servers:
                   - http://localhost:9200
                  local: true
                  cluster_health: false
        start:
            implementation: telegraf.telegraf_plugin.tasks.start

  VM_docker:
      type: cloudify.openstack.nodes.Server
      properties:
        resource_id: monitoring_docker_server
        cloudify_agent:
          user: centos
        server:
          image: 74ff4015-aee1-4e02-aaa8-1c77b2650394
          flavor: c4b193d2-f331-4250-9b15-bbfde97c462a
          userdata: |
            #!/bin/bash
            echo 127.0.1.1 $(cat /etc/hostname) | sudo tee -a sudo /etc/hosts >/dev/null
            echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolv.conf > /dev/null
            echo "nameserver 8.8.8.8" | sudo tee -a sudo /etc/resolvconf/resolv.conf.d/base > /dev/null
      relationships:
        - type: cloudify.openstack.server_connected_to_floating_ip
          target: public_ip2
        - type: cloudify.openstack.server_connected_to_security_group
          target: sg_demo
      interfaces:
        cloudify.interfaces.monitoring_agent:
          install:
            implementation: telegraf.telegraf_plugin.tasks.install
            inputs:
              telegraf_install_path: /opt/telegraf
              download_url:
              telegraf_config_file:
              telegraf_config_inputs:
                outputs:
                  influxdb:
                    urls:
                      - http://localhost:8086
                    database: monitoring_telegraf
                    precision: s
                  kafka:
                    brokers:
                      - 185.98.148.123:9092
                      - 185.98.149.12:9092
                      - 185.98.148.146:9092
                    topic: docker
                    compression_codec: 0
                    required_acks: -1
                    max_retry: 3
                    data_format: influx
                inputs:
                  docker:
                    endpoint: unix:///var/run/docker.sock
                    container_names:
                     - ubuntu
                     - hello-world
          start:
              implementation: telegraf.telegraf_plugin.tasks.start

  elasticsearch:
    type: my_types.nodes.ElasticsearchServer
    properties:
       port: 9300
       clusterName: hello-world
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM_es

  docker:
    type: my_types.nodes.Docker
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM_docker

  influxdb_es:
    type: my_types.nodes.InfluxdbNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM_es
      - type: cloudify.relationships.depends_on
        target: elasticsearch

  influxdb_docker:
    type: my_types.nodes.InfluxdbCentosNode
    relationships:
      - type: cloudify.relationships.contained_in
        target: VM_docker
      - type: cloudify.relationships.depends_on
        target: docker