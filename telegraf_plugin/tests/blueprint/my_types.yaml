node_types:

  my_types.nodes.InfluxdbNode:
    derived_from: cloudify.nodes.DBMS
    properties:
      influxdb_admin_port:
        type: string
        default: 8083
      influxdb_port:
        type: string
        default: 8086
    interfaces:
      cloudify.interfaces.lifecycle:
        create: influxdb/scripts/create_influxdb.sh
        configure: {}
        start:
          implementation: influxdb/scripts/start_influxdb.sh
          inputs:
            influxdb_port:
              type: string
              default: 8086


  my_types.nodes.ElasticsearchServer:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: elasticsearch port
        type: integer
      clusterName:
         description: elasticsearch cluster name
         type: string
    interfaces:
      cloudify.interfaces.lifecycle:
        create: elasticsearch/scripts/install-elasticsearch.sh


  my_types.nodes.Docker:
    derived_from: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create: docker/scripts/install-docker.sh


#
#  gihk.nodes.KafkaNode:
#    derived_from: cloudify.nodes.SoftwareComponent
#    properties:
#      zookeeper_port:
#        type: string
#        default: 2181
#      kafka_port:
#        type: string
#        default: 9092
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create: components/kafka/scripts/create_kafka.sh
#        configure:
#          implementation: components/kafka/scripts/configure_kafka_topic.sh
#          inputs:
#            zookeeper_port:
#              type: string
#              default: { get_property: [kafka, zookeeper_port] }
#
#  gihk.nodes.HekaNode:
#    derived_from: cloudify.nodes.SoftwareComponent
#    properties:
#      kafka_port:
#        type: string
#        default: { get_property: [kafka, kafka_port] }
#      influxdb_port:
#        type: string
#        default: { get_input: influxdb_port1 }
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create: components/heka/scripts/create_heka.sh
#        configure: components/heka/scripts/configure_heka.sh
#        start: components/heka/scripts/start_heka.sh


#  gihk.nodes.GrafanaNode:
#    derived_from: cloudify.nodes.ApplicationServer
#    properties:
#      grafana_port:
#        type: string
#        default: { get_input: grafana_port }
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create: components/grafana/scripts/create_grafana.sh
#        configure: components/grafana/scripts/configure_grafana.sh
#        start:
#          implementation: components/grafana/scripts/start_grafana.sh
#          inputs:
#            influxdb_port:
#              type: string
#              default: { get_input: influxdb_port1 }
#            grafana_port:
#              type: string
#              default: { get_input: grafana_port }
#
#
#  gihk.nodes.TelegrafNode:
#    derived_from: cloudify.nodes.SoftwareComponent
#    properties:
#      kafka_port:
#        type: string
#        default: { get_property: [kafka, kafka_port] }
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create:
#          implementation: components/telegraf/scripts/create_telegraf.sh
#        configure:
#          implementation: components/telegraf/scripts/configure_telegraf.sh
#        start:
#          implementation: components/telegraf/scripts/start_telegraf.sh